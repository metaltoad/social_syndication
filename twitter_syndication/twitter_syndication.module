<?php
/*
 * @file
 * Automatically post your content to Twitter
 */

 /*
 * Implements hook_node_presave().
 */
function twitter_syndication_node_presave($node) {
  dpm($node);
}

/*
 * Implements hook_help().
 */
function twitter_syndication_help($path, $arg) {
  $node = node_load($arg[1]);
  dpm($node, 'Node');
}

/*
 * Implements hook_form_alter().
 *
 * Add settings for posting to Twitter in a node edit form tab.
 */
function twitter_syndication_form_alter(&$form, $form_state, $form_id) {
  // Only include on node add/edit forms
  // TODO create settings page and check for content type
  if (!empty($form['#node_edit_form'])) {

    // The string of this textfield will be shown
    // as summary in the vertical tab.
    $form['social_syndication']['social_syndication_container']['twitter_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Here is the format of your tweet'),
      '#resizable' => TRUE,
      '#rows' => 5,
      '#cols' => 40,
      '#default_value' => t('[node:title]: [node:url] ([node:author:twitter_username]) #[term:name]'), //TODO construct tweet
    );

    // Just to prove I can put more form elements from a different module
    $form['social_syndication']['test_checkbox'] = array(
      '#type' => 'checkbox',
      '#title' => t('Another checkbox'),
      '#default_value' => FALSE,
    );

    $entities = entity_get_info();
    $token_types = array();

    // Scan through the list of entities for supported token entities.
    foreach ($entities as $entity => $info) {
      dpm($entity, 'Entity');
      dpm($info, 'Info');
      $object_callback = "_token_example_get_{$entity}";
      if (function_exists($object_callback) && $objects = $object_callback()) {
        $form[$entity] = array(
          '#type' => 'select',
          '#title' => check_plain($info['label']),
          '#options' => array(0 => t('Not selected')) + $objects,
          '#default_value' => isset($form_state['storage'][$entity]) ? $form_state['storage'][$entity] : 0,
          '#access' => !empty($objects),
        );

        // Build a list of supported token types based on the available entites.
        if ($form[$entity]['#access']) {
          $token_types[$entity] = !empty($info['token type']) ? $info['token type'] : $entity;
        }
      }
    }

    // Display the results of tokenized text.
    if (!empty($form_state['storage']['social_syndication']['social_syndication_container']['twitter_message'])) {
      $form['social_syndication']['social_syndication_container']['twitter_message'] = $form_state['storage']['social_syndication']['social_syndication_container']['twitter_message'];

      $data = array();
      foreach ($entities as $entity => $info) {
        if (!empty($form_state['storage'][$entity])) {
          $objects = entity_load($entity, array($form_state['storage'][$entity]));
          if ($objects) {
            $data[$token_types[$entity]] = reset($objects);
          }
        }
      }
      // Display the tokenized text.
      $form['text_tokenized'] = array(
        '#type' => 'item',
        '#title' => t('Result'),
        '#markup' => token_replace($form_state['storage']['social_syndication']['social_syndication_container']['twitter_message'], $data),
      );
    }

    if (module_exists('token')) {
      $form['social_syndication']['social_syndication_container']['token_tree'] = array(
        '#theme' => 'token_tree',
        '#token_types' => $token_types,
      );
    }
    else {
      $form['social_syndication']['social_syndication_container']['token_tree'] = array(
        '#markup' => '<p>' . t('Enable the <a href="@drupal-token">Token module</a> to view the available token browser.', array('@drupal-token' => 'http://drupal.org/project/token')) . '</p>',
      );
    }

    dpm($form, 'form');
    dpm($form_state, 'form state');
  }
}

/*
 * Implements hook_field_info().
 *
 * @return A new field on the user entity to capture Twitter user name
 */
function twitter_syndication_field_info() {
  return array(
    'field_twitter_syndication_twitter_handle' => array(
      'label' => t('Twitter User Name'),
      'description' => t('Enter your twitter handle'),
      'default_formatter' => 'text',
    ),
  );
}

function twitter_syndication_menu() {
  $items['twitter_syndication/request'] = array(
    'page callback' => '_twitter_syndication_test_request',
    'access arguments' => array('access content'),
  );
  $items['twitter_syndication/access'] = array(
    'page callback' => '_twitter_syndication_test_access',
    'access arguments' => array('access content'),
  );
  return $items;
}

function _twitter_syndication_test_request() {
  $consumer = DrupalOAuthConsumer::load('Tp2ne3J67mIatPw4gVTRg', FALSE);
  if (!$consumer) {
    $consumer = new DrupalOAuthConsumer('Tp2ne3J67mIatPw4gVTRg', 'RmZ1y64J2dhysssO7PCeebDpaLQGuZfmv90kbwZzY');
    $consumer->write();
  }
  $sig_method = DrupalOAuthClient::signatureMethod();
  $client = new DrupalOAuthClient($consumer, NULL, $sig_method);

  $request_token = $client->getRequestToken('http://sandbox.unicorn.mtmdevel.com/oauth/request_token', array(
    'callback' => 'http://sandbox.unicorn.mtmdevel.com/twitter_syndication/access',
  ));

  $request_token->write();

  $_SESSION['twitter_syndication_request_key'] = $request_token->key;

  $auth_url = $client->getAuthorizationUrl('http://sandbox.unicorn.mtmdevel.com/oauth/authorize', array(
    'callback' => 'http://sandbox.unicorn.mtmdevel.com/twitter_syndication/access',
  ));

  drupal_goto($auth_url);
}

function _twitter_syndication_test_access() {
  $consumer = DrupalOAuthConsumer::load('bVAU7jXKSL7vgnyayuiLZiGXZfoevZ8R', FALSE);
  $request_token = DrupalOAuthToken::loadByKey($_GET['oauth_token'], $consumer, OAUTH_COMMON_TOKEN_TYPE_REQUEST);

  $client = new DrupalOAuthClient($consumer, $request_token);
  $verifier = isset($_GET['oauth_verifier']) ? $_GET['oauth_verifier'] : NULL;
  $access_token = $client->getAccessToken('http://sandbox.unicorn.mtmdevel.com/oauth/access_token', array('verifier' => $verifier));
  $request_token->delete();

  $sig_method = DrupalOAuthClient::signatureMethod();
  $auth = new HttpClientOAuth($consumer, $access_token, $sig_method, TRUE, TRUE);
  $formatter = new HttpClientBaseFormatter(HttpClientBaseFormatter::FORMAT_JSON);
  $client = new HttpClient($auth, $formatter);

  $result = $client->post('http://sandbox.unicorn.mtmdevel.com/oauthlogin/api/user/info');
  print '<pre>';
  var_dump($result);
  print '</pre>'; die;
}