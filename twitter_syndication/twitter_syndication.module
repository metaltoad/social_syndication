<?php
/*
 * @file
 * Automatically post your content to Twitter
 */

 /*
 * Implements hook_node_presave().
 */
function twitter_syndication_node_presave($node) {
  dpm($node);
}

function twitter_syndication_help($path, $arg) {
  $node = node_load($arg[1]);
  dpm($node);
}

/*
 * Implements hook_form_alter().
 *
 * Add settings for posting to Twitter
 */
function twitter_syndication_form_alter(&$form, $form_state, $form_id) {
  // Only include on node add/edit forms
  // TODO create settings page and check for content type
  if (!empty($form['#node_edit_form'])) {

    // Just to prove I can put more form elements from a different module
    $form['social_syndication']['test_checkbox'] = array(
      '#type' => 'checkbox',
      '#title' => t('Another checkbox'),
      '#default_value' => FALSE,
    );

    $entities = entity_get_info();
    $token_types = array();

    // Scan through the list of entities for supported token entities.
    foreach ($entities as $entity => $info) {
      $object_callback = "_token_example_get_{$entity}";
      if (function_exists($object_callback) && $objects = $object_callback()) {
        $form[$entity] = array(
          '#type' => 'select',
          '#title' => $info['label'],
          '#options' => array(0 => t('Not selected')) + $objects,
          '#default_value' => isset($form_state['storage'][$entity]) ? $form_state['storage'][$entity] : 0,
          '#access' => !empty($objects),
        );

        // Build a list of supported token types based on the available entites.
        if ($form[$entity]['#access']) {
          $token_types[$entity] = !empty($info['token type']) ? $info['token type'] : $entity;
        }
      }
    }

    // Display the results of tokenized text.
    if (!empty($form_state['storage']['social_syndication']['social_syndication_container']['twitter_message'])) {
      $form['social_syndication']['social_syndication_container']['twitter_message'] = $form_state['storage']['social_syndication']['social_syndication_container']['twitter_message'];

      $data = array();
      foreach ($entities as $entity => $info) {
        if (!empty($form_state['storage'][$entity])) {
          $objects = entity_load($entity, array($form_state['storage'][$entity]));
          if ($objects) {
            $data[$token_types[$entity]] = reset($objects);
          }
        }
      }
      // Display the tokenized text.
      $form['text_tokenized'] = array(
        '#type' => 'item',
        '#title' => t('Result'),
        '#markup' => token_replace($form_state['storage']['social_syndication']['social_syndication_container']['twitter_message'], $data),
      );
    }

    if (module_exists('token')) {
      $form['social_syndication']['social_syndication_container']['token_tree'] = array(
        '#theme' => 'token_tree',
        '#token_types' => $token_types,
      );
    }
    else {
      $form['social_syndication']['social_syndication_container']['token_tree'] = array(
        '#markup' => '<p>' . t('Enable the <a href="@drupal-token">Token module</a> to view the available token browser.', array('@drupal-token' => 'http://drupal.org/project/token')) . '</p>',
      );
    }

/**
 * Builds a list of available content.
 */
function _token_example_get_node() {
  if (!user_access('access content') && !user_access('bypass node access')) {
    return array();
  }

  $node_query = db_select('node', 'n');
  $node_query->fields('n', array('nid', 'title'));
  $node_query->condition('n.status', NODE_PUBLISHED);
  $node_query->orderBy('n.created', 'DESC');
  $node_query->range(0, 10);
  $node_query->addTag('node_access');
  $nodes = $node_query->execute()->fetchAllKeyed();
  $nodes = array_map('check_plain', $nodes);
  return $nodes;
}

/**
 * Builds a list of available comments.
 */
function _token_example_get_comment() {
  if (!module_exists('comment') || (!user_access('access comments') && !user_access('administer comments'))) {
    return array();
  }

  $comment_query = db_select('comment', 'c');
  $comment_query->innerJoin('node', 'n', 'n.nid = c.nid');
  $comment_query->fields('c', array('cid', 'subject'));
  $comment_query->condition('n.status', NODE_PUBLISHED);
  $comment_query->condition('c.status', COMMENT_PUBLISHED);
  $comment_query->orderBy('c.created', 'DESC');
  $comment_query->range(0, 10);
  $comment_query->addTag('node_access');
  $comments = $comment_query->execute()->fetchAllKeyed();
  $comments = array_map('check_plain', $comments);
  return $comments;
}

/**
 * Builds a list of available user accounts.
 */
function _token_example_get_user() {
  if (!user_access('access user profiles') &&
      !user_access('administer users')) {
    return array();
  }

  $account_query = db_select('users', 'u');
  $account_query->fields('u', array('uid', 'name'));
  $account_query->condition('u.uid', 0, '>');
  $account_query->condition('u.status', 1);
  $account_query->range(0, 10);
  $accounts = $account_query->execute()->fetchAllKeyed();
  $accounts = array_map('check_plain', $accounts);
  return $accounts;
}

/**
 * Builds a list of available taxonomy terms.
 */
function _token_example_get_taxonomy_term() {
  $term_query = db_select('taxonomy_term_data', 'ttd');
  $term_query->fields('ttd', array('tid', 'name'));
  $term_query->range(0, 10);
  $term_query->addTag('term_access');
  $terms = $term_query->execute()->fetchAllKeyed();
  $terms = array_map('check_plain', $terms);
  return $terms;
}

/**
 * Builds a list of available files.
 */
function _token_example_get_file() {
  $file_query = db_select('file_managed', 'f');
  $file_query->fields('f', array('fid', 'filename'));
  $file_query->range(0, 10);
  $files = $file_query->execute()->fetchAllKeyed();
  $files = array_map('check_plain', $files);
  return $files;
}
    dpm($form, 'form');
    dpm($form_state, 'form state');
  }
}