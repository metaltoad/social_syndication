<?php
/*
 * @file
 * Automatically post your content to Twitter
 */

/**
 * Implements hook_permission().
 */
function twitter_syndication_permission() {
  return array(
    'send content to twitter' => array(
    'title' => t('Send Content to Twitter'),
    ),
  );
}

 /*
 * Implements hook_node_presave().
 */
function twitter_syndication_node_presave($node) {
  if ($node->social_syndication['tweet_post']) {
    if ($node->social_syndication['twitter_message']) {
      $pretweet = $node->social_syndication['twitter_message'];
    }
    if ($pretweet) {
      $data = array(
        'node' => $node,
      );
      $test = token_replace($pretweet, $data, array('callback' => 'twitter_syndication_format_tweet'));
    }

    $prehashtags = field_get_items('node', $node, 'field_tags');
    $hashtags = array();
      if ($prehashtags) {
        foreach ($prehashtags as $hashtag) {
        $hashtags[] = '#' . $hashtag['name'];
      }
    }
    $tweet = $test;
    if (!empty($hashtags)) {
       $tweet .= ' ' . $hashtags[0] . ' ' . $hashtags[1];
     }
     $_SESSION['tweet'] = $tweet;
    $tweet_length = strlen($tweet);
    if ($tweet_length > 140) {
      form_set_error('twitter_message', t('Your tweet is a bit too long. Try murdering the grammar and resubmitting.'));
    }
    dpm($tweet, 'Tweet');
  }
}

/*
 * Shorten the long url and return it to the tweet.
 * @return a bitly shortened url or short url using the shorten module
 */
function twitter_syndication_format_tweet(&$replacements, $data, $options) {
  //dpm($replacements, 'Replacements'); //the node title and node url
  //dpm($data); the node reference
  //First shorten the url
  if ($replacements['[node:url]']) {
    $url_to_shorten = $replacements['[node:url]'] . '/'; //Bitly needs a trailing slash on all urls
    $short_url = twitter_syndication_shorten_url($url_to_shorten);
    $replacements['[node:url]'] = $short_url;
  }

  //Let's see if the title has any words that should be changed to hashtags
  if ($replacements['[node:title]']) {
    $prehashtitle = $replacements['[node:title]'];
    $titlewithhashes = _twitter_syndication_hashtag_title($prehashtitle);
    $replacements['[node:title]'] = $titlewithhashes;
  }
  return $replacements;
}

/*
 * Shorten the url using bitly or shorten module
 * @return the shortened node url
 */
function twitter_syndication_shorten_url($url_to_shorten) {
  $long_url = urlencode($url_to_shorten);
  $base_url = 'https://api-ssl.bitly.com/v3/shorten?';
  $login = variable_get('ss_bitly_login', '');
  $apikey = variable_get('ss_bitly_key', '');
  $format = 'json';
    //build the string
    if ($login && $apikey) {
      $dest = $base_url . 'login=' . $login . '&apiKey=' . $apikey . '&longUrl=' . $long_url . '&format=' . $format;
      $result = drupal_http_request($dest);
      $contents = json_decode($result->data);
      if ($contents->status_code == 200) {
        $short_url = $contents->data->url;
        return $short_url;
      }
    }
}

/*
 * Add hashtags to the node title
 * @return title with chosen words turned into twitter hashtags
 */
function _twitter_syndication_hashtag_title($prehashtitle) {
  $prehashtitlearray = explode(' ', $prehashtitle);
  $normalized = str_replace(' ', '', variable_get('ss_twitter_hashtags'));
  $wordstohash = explode(',', $normalized);
  $wordstohashlower = array_map('strtolower', $wordstohash);
  $titlewithhashesarray = array();
    foreach($prehashtitlearray as $word) {
      if ( in_array(strtolower(trim($word)), $wordstohashlower) ) {
        $word = '#' . $word;
      }
      $titlewithhashesarray[] = $word;
    }
  $titlewithhashes = implode(' ', $titlewithhashesarray);

  return $titlewithhashes;
}

/*
 * Implements hook_help().
 */
function twitter_syndication_help($path, $arg) {
  $node = node_load($arg[1]);
  //dpm($node, 'Node');
}

/*
 * Implements hook_form_alter().
 *
 * Add settings for posting to Twitter in a node edit form tab.
 */
function twitter_syndication_form_alter(&$form, $form_state, $form_id) {
  // Only include on node add/edit forms
  if (!empty($form['#node_edit_form'])) {
    $nodetype = $form['#node']->type;
    $nodestotweet = variable_get('ss_node_types');
    // dpm($form, 'Form');
    // dpm($nodetype, 'Nodetype of form');
    // dpm($nodestotweet, 'Array of content types from settings');

    // The string of this textfield will be shown
    // as summary in the vertical tab.
    $form['social_syndication']['social_syndication_container']['twitter_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Here is the format of your tweet'),
      '#resizable' => TRUE,
      '#rows' => 5,
      '#cols' => 40,
      '#default_value' => t('New post: [node:title] [node:url] (@[node:author:ss_twitter_username])'),
    );

    // Just to prove I can put more form elements from a different module
    $form['social_syndication']['test_checkbox'] = array(
      '#type' => 'checkbox',
      '#title' => t('Another checkbox'),
      '#default_value' => FALSE,
    );

    $entities = entity_get_info();
    $token_types = array();

    // Scan through the list of entities for supported token entities.
    foreach ($entities as $entity => $info) {
      $object_callback = "_token_example_get_{$entity}";
      if (function_exists($object_callback) && $objects = $object_callback()) {
        $form[$entity] = array(
          '#type' => 'select',
          '#title' => check_plain($info['label']),
          '#options' => array(0 => t('Not selected')) + $objects,
          '#default_value' => isset($form_state['storage'][$entity]) ? $form_state['storage'][$entity] : 0,
          '#access' => !empty($objects),
        );

        // Build a list of supported token types based on the available entites.
        if ($form[$entity]['#access']) {
          $token_types[$entity] = !empty($info['token type']) ? $info['token type'] : $entity;
        }
      }
    }

    // Display the results of tokenized text.
    if (!empty($form_state['storage']['social_syndication']['social_syndication_container']['twitter_message'])) {
      $form['social_syndication']['social_syndication_container']['twitter_message'] = $form_state['storage']['social_syndication']['social_syndication_container']['twitter_message'];

      $data = array();
      foreach ($entities as $entity => $info) {
        if (!empty($form_state['storage'][$entity])) {
          $objects = entity_load($entity, array($form_state['storage'][$entity]));
          if ($objects) {
            $data[$token_types[$entity]] = reset($objects);
          }
        }
      }
      // Display the tokenized text.
      $form['text_tokenized'] = array(
        '#type' => 'item',
        '#title' => t('Result'),
        '#markup' => token_replace($form_state['storage']['social_syndication']['social_syndication_container']['twitter_message'], $data),
      );
    }

    if (module_exists('token')) {
      $form['social_syndication']['social_syndication_container']['token_tree'] = array(
        '#theme' => 'token_tree',
        '#token_types' => $token_types,
      );
    }
    else {
      $form['social_syndication']['social_syndication_container']['token_tree'] = array(
        '#markup' => '<p>' . t('Enable the <a href="@drupal-token">Token module</a> to view the available token browser.', array('@drupal-token' => 'http://drupal.org/project/token')) . '</p>',
      );
    }
  } //endif
} //endfunction

/*
 * Implements hook_field_info().
 *
 * @return A new field on the user entity to capture Twitter user name
 */
function twitter_syndication_field_info() {
  return array(
    'field_twitter_syndication_twitter_handle' => array(
      'label' => t('Twitter User Name'),
      'description' => t('Enter your twitter handle'),
      'default_formatter' => 'text',
    ),
  );
}